# Copyright (c) 2010 CAL54, Inc.  All Rights Reserved.
# $Id$
ListModel();
req()->initialize_fully('C4_HOME_LIST');
my($title_key) = 'bunit-title' . random_string();
my($tag_key) = 'tag' . random_string();
my($desc_key) = 'desc' . random_string();
DateTime()->set_test_now('12/12/2050 12:0:0');
my($date) = DateTime()->now;
my($prev_date) = Date()->add_days(Date()->from_datetime($date), -1);
req()->set_realm(unauth_model('Scraper', {
    default_venue_id => realm_id('v-nissis'),
})->get('scraper_id'));
model('CalendarEvent')->do_iterate(sub {
    my($ce) = @_;
    $ce->cascade_delete;
    return 1;
}, 'unauth_iterate_start', {
    url => 'http://homelist.bunit',
});

my($last_ce);
my($first_ce);
foreach my $i (0 .. 7) {
    my($d) = DateTime()->add_days($date, + $i);
    my($m) = model('CalendarEvent')->create_realm({
	realm_id => req('auth_id'),
	dtstart => $d,
	dtend => DateTime()->add_seconds($d, 7200),
	time_zone => TimeZone()->AMERICA_DENVER,
	location => $tag_key,
	description => $desc_key . "_$i",
	url => 'http://homelist.bunit',
    },
    {
	display_name => $title_key,
    });
    model('VenueEvent')->create({
	venue_id => realm_id('v-nissis'),
	calendar_event_id => $m->get('calendar_event_id'),
    });
    $last_ce = $m;
    $first_ce ||= $m;
}

commit();
model('HomeQueryForm', {});
DateTime()->set_test_now(DateTime()->add_days($date, 7));
$date = DateTime()->now;

#req()->set_realm(undef);
my($rows);
[
    load_page => [
        [{begin_date => $prev_date}] => [
	    {
		'RealmOwner.display_name' => $title_key,
		'venue.RealmOwner.display_name' => q{Nissi's},
#TODO: Write tests just for time formatting, move outside module
		start_end_am_pm => '5am - 7',
		month_day => 'Monday December 19, 2050',
		'CalendarEvent.time_zone' => 'AMERICA_DENVER',
	    },
	],
        [{what => $title_key}] => [
	    {
		'RealmOwner.display_name' => $title_key,
	    },
	],
	sub {
	    model('RowTag')->row_tag_replace(
		$last_ce->get('calendar_event_id'),
		'C4_HIDDEN_CALENDAR_EVENT',
		1,
	    );
	    return [{what => $title_key}];
	} => [],
	inline_case(
	    sub {
		DateTime()->set_test_now(undef);
	    },
	),
        [{count => 3, what => $title_key}] => sub {
	    $rows = shift->get('object')->map_rows;
	    assert_equals(3, scalar(@$rows));
	    return 1;
	},
        [{count => 3, what => $title_key, page_number => 2}] => sub {
	    my($rows2) = shift->get('object')->map_rows;
	    assert_not_equals(
		$rows->[0]->{'CalendarEvent.calendar_event_id'},
		$rows2->[0]->{'CalendarEvent.calendar_event_id'},
	    );
	    assert_equals(3, scalar(@$rows2));
	    return 1;
	},
    ],
    execute => [
	sub {
	    req()->put(query => {this => $first_ce->get('calendar_event_id')});
	    [req()];
	} => sub {
	    my($list) = req(class());
	    $rows = $list->map_rows;
	    assert_equals(1, scalar(@$rows));
	    assert_equals(
		$first_ce->get('calendar_event_id'),
		$rows->[0]->{'CalendarEvent.calendar_event_id'},
	    );
	    assert_equals(0, $list->get_query->get('has_next'));
	    assert_equals(0, $list->get_query->get('has_prev'));
	    return 1;
	},
	sub {
	    req()->put(query => {this => ['999999999'], count => 2});
	    [req()];
	} => sub {
	    $rows = req()->get(class())->map_rows;
	    assert_equals(2, scalar(@$rows));
	    return 1;
	},
    ],
];
